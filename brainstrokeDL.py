# -*- coding: utf-8 -*-
"""bitirme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PK7E3C9oFiADkFmxDE3ZTx_Hh8vVBMEy
"""

import tensorflow as tf
#import libarchive
import pydot
#import cartopy
import numpy as np
#import main
from matplotlib import pyplot as plt
import keras
import keras.utils
from keras import utils as np_utils
from keras.utils.np_utils import to_categorical
from keras.datasets import cifar10
from keras.utils import np_utilsß
import os
import time
import tensorflow as tf
from keras.layers.core import Dropout, Lambda

from tensorflow.keras.layers import Dense, Flatten, Conv2D
from tensorflow.keras import Model
import numpy as np
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

import h5py as h5
from PIL import Image
from keras.callbacks import ModelCheckpoint
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras import backend as K
data1 = []  #normal  -  X_train
data2 = []  #segmente  -Y_train


for i in range(49,52):     #(49,122)

    try:
     path2 = "../input/rsnadata/Egitim-20210517T173412Z-001/Egitim/" + str(i) + "/brain/"
     dirs2 = os.listdir(path2)

     for i in range(len(dirs2)+1):
       for dir in dirs2:
        if ( str(i) + ".jpg" ) == dir:
            resim = Image.open(path2 + dir)

            data = np.array(resim)
            data1.append(data[5:-5,5:-5])

            bulundu = False
            for j in dirs2:
               if (str(i) + "_HGE_Seg.jpg") == j:
                  bulundu=True
                  resim = Image.open(path2 + j)
               #  nResim = resim.resize((640,640))
                  data = np.array(resim)

                  data2.append(data[5:-5,5:-5])
                  #print(j)
            if bulundu==False:
                data = np.zeros([640,640])
                data2.append(data)
                #print( str(i) + ". Yeni SegMask" )
    except:
        continue


data1 = np.array(data1, dtype="float32")
data2 = np.array(data2, dtype="float32")
data1 = data1 - np.mean(data1)


#resimX = data2[13]
#plt.imshow(resimX, cmap="gray")


print("Data1 uzunlugu:" , len(data1))
print("data1 şekli:" , data1.shape)
print("Data2 uzunlugu:" , len(data2))
print("Data2 sekli:" , data2.shape)

img_width=data1.shape[1]
img_height=data1.shape[2]
img_channels=1
"""
resimX = data1[15]
plt.imshow(resimX, cmap="gray")
"""

#plt.plot(data1[25]);
for i in range(len(data1)):
     data1[i] = (lambda x: x / 255.) (data1[i])
     data1[i] = (data1[i]> 0.5) #beyazsa beyazdır,grileri yok et.

resimX = data1[12]
plt.imshow(resimX, cmap="gray")
#build model
#layers model from keras
def get_model():
    #Model oluşturma
    inputs=tf.keras.layers.Input((img_width,img_height,img_channels))   #input layer
    #inputs=tf.keras.Layers.Lambda(lambda x : x/255.)(inputs)
    s = Lambda(lambda x: x / 255) (inputs)

    c1=tf.keras.layers.Conv2D(16,(3,3),activation="relu",kernel_initializer="he_normal",padding="same")(s)
    c1=tf.keras.layers.Dropout(0.1)(c1)
    c1=tf.keras.layers.Conv2D(16,(3,3),activation="relu",kernel_initializer="he_normal",padding="same")(c1)
    p1=tf.keras.layers.MaxPooling2D((2,2))(c1) #Avf pooling

    c2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p1)
    c2 = tf.keras.layers.Dropout(0.2)(c2)
    c2 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c2)
    p2 = tf.keras.layers.MaxPooling2D((2, 2))(c2)

    c3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p2)
    c3 = tf.keras.layers.Dropout(0.4)(c3)
    c3 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c3)
    p3 = tf.keras.layers.MaxPooling2D((2, 2))(c3)

    c4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p3)
    c4 = tf.keras.layers.Dropout(0.5)(c4)
    c4 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c4)
    p4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(c4)

    c5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(p4)
    c5 = tf.keras.layers.Dropout(0.3)(c5)
    c5 = tf.keras.layers.Conv2D(256, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c5)

#Expansive path
    u6 = tf.keras.layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c5)
    u6 = tf.keras.layers.concatenate([u6, c4])
    c6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u6)
    c6 = tf.keras.layers.Dropout(0.2)(c6)
    c6 = tf.keras.layers.Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c6)

    u7 = tf.keras.layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(c6)
    u7 = tf.keras.layers.concatenate([u7, c3])
    c7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u7)
    c7 = tf.keras.layers.Dropout(0.4)(c7)
    c7 = tf.keras.layers.Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c7)

    u8 = tf.keras.layers.Conv2DTranspose(32, (2, 2), strides=(2, 2), padding='same')(c7)
    u8 = tf.keras.layers.concatenate([u8, c2])
    c8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u8)
    c8 = tf.keras.layers.Dropout(0.5)(c8)
    c8 = tf.keras.layers.Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c8)

    u9 = tf.keras.layers.Conv2DTranspose(16, (2, 2), strides=(2, 2), padding='same')(c8)
    u9 = tf.keras.layers.concatenate([u9, c1], axis=3)
    c9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(u9)
    c9 = tf.keras.layers.Dropout(0.3)(c9)
    c9 = tf.keras.layers.Conv2D(16, (3, 3), activation='relu', kernel_initializer='he_normal', padding='same')(c9)

    outputs = tf.keras.layers.Conv2D(1, 1, padding="same", activation="sigmoid")(c9)  #çıktı bir kanal olacak
    model = tf.keras.Model(inputs=[inputs], outputs=[outputs])
    return model

#modeli derleme ve eğitme
model=get_model()

model.compile(optimizer='adam', loss='binary_crossentropy', metrics="accuracy")
#callbacks  #iou
#model.summary()

#checkpointer = ModelCheckpoint('model-dsbowl2018-1.h5', verbose=1, save_best_only=True)
results = model.fit(x=data1,y=data2, validation_split=0.3, batch_size=3, epochs=3)
model.save("model1") #data generator : foto
model = keras.models.load_model("model1")

for i in range(len(data1)):
     data1[i] = (lambda x: x / 255.) (data1[i])
     data1[i] = (data1[i]> 0.5) #beyazsa beyazdır.

BS = 3
start = time.time()
print("[INFO] model degerlendiriliyor...")
tahminler = model.predict(data1, batch_size=BS)  #her data1 görüntüsüne karşılık bir tahmin dizisi içermektedir.( nummpy dizisi içerisinde)
print(time.time() - start)


for i in range(len(data2)):
    data2[i] = (lambda x: x + 0.01) (data2[i])
    tp = np.sum( np.logical_and( data2[i]==1 , tahminler[i]== 1 ))/ np.sum(data2[i]==1)     # Bu metrik TruePozitive TP diye bilinir.
    print(tp)


for i in range(len(data1)):
     data1[i] = (lambda x: x / 255.) (data1[i])
     data1[i] = (data1[i]> 0.5) #beyazsa beyazdır.

resimX = data1[12]
plt.imshow(resimX, cmap="gray")

import tensorflow as tf
#import libarchive
import pydot
#import cartopy
import numpy as np
#import main
from matplotlib import pyplot as plt
import keras
import keras.utils
from keras.layers.core import Dropout, Lambda
from keras import utils as np_utils
from keras.utils.np_utils import to_categorical
from keras.datasets import cifar10
from keras.utils import np_utils
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

from tqdm import tqdm
from itertools import chain
from skimage.io import imread, imshow, imread_collection, concatenate_images
from skimage.transform import resize
from skimage.morphology import label

from keras.models import Model, load_model
from keras.layers import Input
from keras.layers.core import Dropout, Lambda
from keras.layers.convolutional import Conv2D, Conv2DTranspose
from keras.layers.pooling import MaxPooling2D
from keras.layers.merge import concatenate
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras import backend as K
import sys
import random
import warnings
from PIL import Image
from keras.preprocessing import image

data1 = []  #normal  -  X_train
data2 = []  #segmente  -Y_train
sayacNormal = 263
k=0

for i in range(49,122):     #(49,122)

    try:
     path = "../input/rsnadata/Egitim-20210517T173412Z-001/Egitim/" + str(i) + "/brain/"
     dirs2 = os.listdir(path)

     for i in range(len(dirs2)+1):
       for dir in dirs2:
        if ( (str(i) + ".jpg" ) == dir) :
            """
            resim = Image.open(path + dir)
            data = np.array(resim)
            data = data[5:-5,5:-5]
            data = np.array(data, dtype="float32")
            data = (lambda x: x / 255) (data)
            data1.append(data)
            """
            bulundu = False
            for j in dirs2:

               if (str(i) + "_HGE_Seg.jpg") == j:
                  bulundu = True
                  resim = Image.open(path + j)
                  data = np.array(resim)
                  data = data >0
                  data = np.array(data, dtype="int32")
                  data2.append(data[5:-5,5:-5])
                  k=k+1
                  resim = Image.open(path + dir)
                  data = np.array(resim)
                  data = data[5:-5,5:-5]
                  data = np.array(data, dtype="float32")
                  # dataT = (lambda x: x / 255) (dataT)
                  data1.append(data)
                  break

            if(sayacNormal>0 and bulundu==False):
                if bulundu == True: print("trrerererrue")
                sayacNormal = sayacNormal - 1
                resim = Image.open(path + dir)
                data = np.array(resim)
                data = data[5:-5,5:-5]
                data = np.array(data, dtype="float32")
                #data = (lambda x: x / 255) (data)
                data1.append(data)

                data = np.zeros([640,640])
                data = data >0
                data = np.array(data, dtype="int32")
                data2.append(data)
                #print( str(i) + ". Yeni SegMask" )

            """      #print(j)
            if bulundu==False:
                data = np.zeros([640,640])
                data = data >0
                data = np.array(data, dtype="int32")
                data2.append(data)
                #print( str(i) + ". Yeni SegMask" )
            """
            break
    except:
        continue


data1 = np.array(data1, dtype="float32")
data2 = np.array(data2, dtype="int32")

img_width=data1.shape[1]
img_height=data1.shape[2]
img_channels=1

print(data1.shape)  # (64, 224, 224)
data1 = np.repeat(data1[..., np.newaxis], 3, -1)
print(data1.shape)  # (64, 224, 224, 3)
​
print(data2.shape)  # (64, 224, 224)
data2 = np.repeat(data2[..., np.newaxis], 3, -1)
print(data2.shape)  # (64, 224, 224, 3)
